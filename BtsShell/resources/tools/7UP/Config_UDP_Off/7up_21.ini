##
## 7up configuration file
##
## This file is used to specify the default behaviour of the 7up tool.
## Save under C:\Documents and Settings\<userid>\7up.ini
##
## The concept of this configuration file is to specify _how_ to
## perform certain actions. The command line is still used for
## defining _what_ actions shall be performed. So the default
## behaviour of 7up is always defensive: do nothing.
##
## See below for supported options. Regarding general synax of this
## file:
## - option keys are case-insensitive
## - leading/preceding whitespace is ignored (ie, also blank lines are
##   ignored)
## - lines starting with '#' are ignored (also when preceded by whitespace)
## - you can create multi-line entries with by putting a "\" at line end


## CCStudioBaseDir
#
# Specify installation directory of CCStudio, so 7up can find
# the scripting plugin that's needed for remote-controlling CCStudio
#
# Syntax:
# CCStudioBaseDir = <directory>
#
# Example (this is the default):
# CCStudioBaseDir = c:\CCStudio_v3.3


## HostHasSNMPPowerSwitch
#
# Specify additional entries for the automatic Hostname-to-"IP power
# switch" table.  This used by option 'X' to find the proper power
# switch for your test PC.
#
# Multiple instances of this option can be specified.
#
# Syntax:
# HostHasSNMPPowerSwitch = <host>:<pduHost>,<pduPort>
#
# Example:
# HostHasSNMPPowerSwitch = whale115:pdu1204,2


## UDPLogDest
#
# Set default UDP logging destination (ie, a file or a base directory).
# This is related to option -U, but it does not actualy enable UDP
# logging (so you still need to specify -U to enable logging).
#
# Syntax:
# UDPLogDest = <file|directory>
#
# Example:
# UDPLogDest = L:\tmp\ost\logs
UDPLogDest = c:\Temp\7upLogs


## UDPConsole
#
# Print a copy of all UDP/UDPCP/AaTrace logging to console
# (same as option -c).
#
# Syntax:
# UDPConsole = 0|1
#
# Example:
# UDPConsole = 1
UDPConsole = 0


## UDPLogPorts
#
# Re-defines the UDP ports for capturing log messages.
#
# Syntax:
# UDPLogPorts = <port>,<port>,...
#
# Example (this is the default):
# UDPLogPorts = 51000,51011
#UDPLogPorts = 51000,51001,51003,50011
UDPLogPorts = 0


## UDPCPLogging
#
# Enable/disable UDPCP logging of messages between test PC and Flexi
# (same as option -P). Logging will only take place if UDP logging has
# been enabled on the command line (-U).
#
# Syntax:
# UDPCPLogging = 0|1
#
# Example (this is the default):
# UDPCPLogging = 0
UDPCPLogging = 1


## MessageMap
#
# Specify a file that can be used for mapping message IDs to message
# names, so you see the message names in the UDP log (same as option -s).
# Supported file types are XML (Pegasus, MacSctSackTarget.xml) and
# AHTI (MessageIDs.txt).
#
# Syntax:
# MessageMap = <file path>
#
# Example (this is the default):
# MessageMap = C:/Pegasus/workspace_Inc16/MacSctPegasus/ProtocolDescription/MacSctSackTarget.xml
#MessageMap = c:/Pegasus/workspaceLTE/TDLTE_DSPi/Protocoldescription/TDLTE_DSPi_WMP.xml
MessageMap = c:/Pegasus/workspaceLTE/Tools/scripts/7up/MessageIds.txt


## UDPCPLogRawMessages
#
# Specify UDPDP message ids for raw logging (ie, these messages
# will appear with full hexdump in UDP log). Same as
# option -R. Message ids are specified in hex. Use '*'
# for a full dump of *all* messages (this may affect logging
# performance).
#
# Logging will only take place if UDP logging has been enabled on the
# command line (-U).
#
# Syntax:
# UDPCPLogRawMessages = *|(<id>,...)
#
# Examples:
# UDPCPLogRawMessages = 2ba2,2ba3
# UDPCPLogRawMessages = *
UDPCPLogRawMessages = *


## UDPCPLogRawEther
#
# When raw message logging has been enabled, this option specifies
# that not only the UDPCP message shall be captured, but the entire
# Ethernet frame.
#
# Only useful if you suspect some UDPCP communication problem
# from/to your test program.
#
# *THIS WILL BREAK DECODING* with -D or the fled tool, since
# both assume UDPCP message only. So only enable this feature when
# you really know what you're doing.
#
# Syntax:
# UDPCPLogRawEther = 0|1
#
# Example (this is the default):
# UDPCPLogRawEther = 0
UDPCPLogRawEther = 0


## PacketCaptureBufferSize
#
# For monitoring UDP(CP) traffic on Ethernet level, 7up uses the same
# packet capturing library that's used by Wireshark ("WinPcap").
#
# When you expect a *very* high throughput of logging messages (or
# AaTraced messages), then 7up/your PC/your hard disk may not be able
# to write the UDP log quickly enough for catching up with incoming data.
#
# 7up will issue a warning in such cases ("x packets dropped by
# WinPcap").
#
# As long as you expect such high throughputs in bursts only, you can
# try to avoid losses by increasing WinPcap's internal packet buffer
# size. The default size is 1024 KB.
#
# Syntax:
# PacketCaptureBufferSize = <kilobytes>
#
# Example (this is the default):
# PacketCaptureBufferSize = 1024
PacketCaptureBufferSize = 1024


## InternalTracing
#
# Activate tracing of (DSP-/FSP-)internal messages via AaTrace (same
# as BtsLog functionality).  You can define whether to trace
# all messages, or rx/tx-only, but _the setting must be identical
# for all messages traces on one core_. The default is to trace
# all messages (ie, rx and tx).
#
# Logging will only take place if UDP logging has been enabled on the
# command line (-U).
#
# Syntax:
# InternalTracing = <dsp>:[(tx|rx|all|none):]<msgStart>[-<msgEnd>],...
#
# Example:
# InternalTracing = 1443:tx:238f-24ff,1443:tx:2210-2240,1482:rx:235e,1483:235e


## AutomationMethods
#
# Specify automation methods (same as option -A)
# Currently supported methods are:
#
#   o "tmstart[=<timeout>]"
#     when using "-O", automatically start cores when detecting that
#     a AaTraceMenCtrlResponseMsg is sent from Flexi; requires
#     options -P and -U (UDPCP tracing)
# 
#   o "fatalmemdump"
#     save fday memory areas and registers to file in case of crash
#     (use together with option -F)
# 
#   o "finalmemdump=<id>:<id>:..."
#      take memory dump and registers on specified cores before exiting
#      example: finalmemdump=1442:1461
# 
#   o "autoflush"
#      set autoflush mode for STDOUT/STDERR. for automation only.
# 
#   o "remote"
#      remote access via TCP socket on port 64738; for automation only
#
#   o "getfcmstartlogs"/"getfcmendlogs"
#      retrieve "/ram/startup.log" "/ram/startup.zip" and "/aastartup_log.txt"
#      from FCM MCU before/after all other steps; if both options are specified,
#      the "end" logs will overwrite "start" logs
#
#   o "getfcmstartprocs" / "getfcmendprocs"
#      retrieve process list from FCM unit before/after all other steps; the
#      process lists will be saved in text files "fcm-mcu-processes-start.txt" and
#      "fcm-mcu-processes-start.txt", respectively
#
#   o "socketinfo"
#      upon startup, print information on active Windows sockets
#
#   o "ftpd[=<directory>]"
#      start FTP server for Flexi binfiles; by default, same directory as
#      specified for option "-O" is used
#
#   o "ftpwait[=<timeout>]"
#      wait for Flexi requesting binfiles after reset; if no timeout is
#      specified, used the default of $macConfig->{ftpwaitTimeout} (seconds)
#
# Syntax:
# AutomationMethods = <method>,...
#
# Examples:
# AutomationMethods = tmstart,fatalmemdump,finalmemdump=1442:1463
# AutomationMethods = tmstart=600
AutomationMethods = fatalmemdump


## FatalErrorHandling
#
# Specify cores for which fatal kernel error handling is desired.
# This will detect cores that enter the fatal kernel error
# handler; for those, ETB buffer will be read from memory
# and will then be converted to TDF format. Same as option -F.
#
# Use '*' to specify all cores for which are loaded with software.
#
# Syntax:
# FatalErrorHandling = *|<core>,...
#
# Examples:
FatalErrorHandling = *
# FatalErrorHandling = 1443,1483


## FlexiNetDevicePattern
#
# Specify pattern (regular expression) that is used for finding
# the correct network device where your Flexi is connected.
#
# If this pattern is defined, only device names that match the pattern
# will be considered.
# Matching takes place against the "Description" field that you
# see in the output of "ipconfig /all"
#
# If your pattern contains leading/trailing space, you can enclose
# it in doubel quotes (").
#
# Syntax:
# FlexiNetDevicePattern = <regexp>|"<regexp>"
#
# Examples:
# FlexiNetDevicePattern = Intel
# FlexiNetDevicePattern = "Intel"
# FlexiNetDevicePattern = " space before and after "


## FlexiReadyIps
#
# This defines a list of IPs that are "pinged" (ICMP ECHO_REQUEST packets)
# in order to check that the Flexi has recovered from a reset/power switch
# cycle.
#
# The IPs are pinged in the given order; so, in order to save some bandwidth,
# you should specify first the IP that comes up LAST when Flexi starts.
#
# Syntax:
# FlexiReadyIps = <ip address>,...
#
# Examples:
# 1. this is the default, suitable for LTE MAC without SRIO and "quick reset" (-z/-Z):
# FlexiReadyIps = 192.168.255.176,192.168.255.174,192.168.255.172,192.168.255.35,192.168.255.1
#
# 2. check *all* IPs - use this when using SRIO and/or "quick reset" (-z/-Z)
# FlexiReadyIps = 192.168.255.177,\
#                 192.168.255.176,\
#                 192.168.255.175,\
#                 192.168.255.174,\
#                 192.168.255.173,\
#                 192.168.255.172,\
#                 192.168.255.171,\
#                 192.168.255.35,\
#                 192.168.255.1


## TftpAliases
#
# This defines a set of "shortcuts" that can be used for TFTP
# transfers.  these shortcuts will also be used for naming the output
# files.
#
# Syntax:
# TftpAliases = <alias name>:(<ip address>|(<alias name>+<alias name>+...))
#
# Example:
# TftpAliases = ul:192.168.255.174,\
#               dl:192.168.255.172,\
#               all:ul+dl


## HistoryBufferSignatures
#
# Here you define the signatures that are used for auto-detecting
# history buffers in binfiles. These are characteristic sequences of
# bytes, specific to every history buffer "type".
# For reach history buffer that you want to use, specify its
# signature as a sequence of little endian "u32" words, in hexadecimal
# notation.
#
# All words in a signature must be separated by a colon (":"), and
# multiple signatures must be separated by comma (",").
#
# Syntax:
# HistoryBufferSignatures = ([0x]<u32-word>:...),...
#
# Example: (this is the default - when you define this option,
#          then you must add this default also)
#
# HistoryBufferSignatures = \
#       # LTE MAC:
#       0x12b4ad81:0x94cc425b:0x8c5385d2:0x9e5f340b


## CoreInterStartupDelay
#
# Here you can specify a delay (in seconds) that is used
# between starting the DSP cores via CCStudio. By default,
# cores are started one after another as quickly as possible
# (in the sequence specified by the priorities in "OutFileNames").
# No delay will be used for cores with identical priority.
#
# You can also provide fractional values like "0.5" here.
#
# Syntax:
# CoreInterStartupDelay = <seconds>
#
# Example: (this is the default, hard-coded in 7up)
# CoreInterStartupDelay = 0


## OutFileNames
#
# Define name of the .out files used for target loading
# with option -O, including the start "priority"
# for each core. Cores with a lower start priority will
# be started earlier. Both name and start priority
# are optional.
#
# Use empty entries to specify unused cores. Those will
# neither be loaded nor started, *but* they will be opened
# in CCStudio (which means GELs will be loaded, and core
# may be halted).
#
# Use the special name "UNUSED" to identify cores that
# should not be touched by CCStudio at all.
#
# Syntax:
# OutFileNames = [<prio>:][(<name>|"<name>")],...
#
# Example 1: (this is the default, hard-coded in 7up)
#
# OutFileNames = 4:macFspbFaraday2Cpu1Debug.out,               \
#                1:macFspbFaraday2Cpu2_withTUPsimDebug.out,    \
#                5:macFspbFaraday2Cpu3Debug.out,               \
#                6:macFspbFaraday4Cpu1Debug.out,               \
#                2:macFspbFaraday4Cpu2_withTUPsimDebug.out,    \
#                ,                                             \
#                ,                                             \
#                3:macFspbFaraday6Cpu2Debug.out,               \
#                7:PhySimulatorDebug.out
#
# Example 2: (same without debug mode)
#
# OutFileNames = 4:macFspbFaraday2Cpu1.out,               \
#                1:macFspbFaraday2Cpu2_withTUPsim.out,    \
#                5:macFspbFaraday2Cpu3.out,               \
#                6:macFspbFaraday4Cpu1.out,               \
#                2:macFspbFaraday4Cpu2_withTUPsim.out,    \
#                ,                                        \
#                ,                                        \
#                3:macFspbFaraday6Cpu2.out,               \
#                7:PhySimulator.out
#
# Example 3: (setup for increment 17 with 9 cores/out files)
#
# OutFileNames = 4:macFspbFaraday2Cpu1Debug.out,          \
#                1:macFspbFaraday2Cpu2Debug.out,          \
#                5:macFspbFaraday2Cpu3Debug.out,          \
#                6:macFspbFaraday4Cpu1Debug.out,          \
#                2:macFspbFaraday4Cpu2Debug.out,          \
#                8:tupFspbFaraday4Cpu3Debug.out,          \
#                9:tupFspbFaraday6Cpu1Debug.out,          \
#                3:macFspbFaraday6Cpu2Debug.out,          \
#                7:PhySimulatorDebug.out  
