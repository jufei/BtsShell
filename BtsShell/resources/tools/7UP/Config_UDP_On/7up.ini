##
## 7up configuration file
##
## This file is used to specify the default behaviour of the 7up tool.
## Save under C:\Documents and Settings\<userid>\7up.ini
##
## The concept of this configuration file is to specify _how_ to
## perform certain actions. The command line is still used for
## defining _what_ actions shall be performed. So the default
## behaviour of 7up is always defensive: do nothing.
##
## See below for supported options. Regarding general syntax of this
## file:
## - option keywords are case-insensitive
## - leading/preceding whitespace is ignored (ie, also blank lines are
##   ignored)
## - lines starting with '#' are ignored (also when preceded by whitespace)
## - you can create multi-line entries with by putting a "\" at line end
##
## On top of that, you can use pre-processor directives like
## @include, @define, @ifdef etc -- you can even embed Perl code.
## Details on the syntax can be found here:
##   http://search.cpan.org/~mykl/Text-EP3-1.10/lib/Text/EP3.pm#Standard_Directives
## (The special symbols WINDOWS and LINUX (and UNIX) wil be defined
## automatically by 7up on the respective platform, so you can use
## them in @ifdef clauses).

## CCStudioBaseDir
#
# Specify installation directory of CCStudio, so 7up can find
# the scripting plugin that's needed for remote-controlling CCStudio
#
# Syntax:
# CCStudioBaseDir = <directory>
#
# Example (this is the default):
# CCStudioBaseDir = c:\CCStudio_v3.3


## HostHasSNMPPowerSwitch
#
# Specify additional entries for the automatic Hostname-to-"IP power
# switch" table.  This used by option 'X' to find the proper power
# switch for your test PC.
#
# Multiple instances of this option can be specified.
#
# Syntax:
# HostHasSNMPPowerSwitch = <host>:<pduHost>,<pduPort>
#
# Example:
# HostHasSNMPPowerSwitch = whale115:pdu1204,2


## UDPLogDest
#
# Set default UDP logging destination (ie, a file or a base directory).
# This is related to option -U, but it does not actualy enable UDP
# logging (so you still need to specify -U to enable logging).
#
# Syntax:
# UDPLogDest = <file|directory>
#
# Example:
# UDPLogDest = L:\tmp\ost\logs
UDPLogDest = c:\Temp\7upLogs

## UDPLogLimit / UDPLogAfterFkeLimit
#
# Set the maximum number of lines that will be recorded in the UDP log
# (if UDP logging is active). This is useful to avoid one test case
# that's going wild to eat up all your disk space.
#
# 'UDPLogLimit' sets a global, fixed limit.
# 'UDPLogAfterFkeLimit' sets the number of lines that will be recorded
# after a fatal kernel error has been detected by 7up.
#
# Limits is given in number of lines.
#
# Syntax:
# UDPLogLimit         = <number of lines>
# UDPLogAfterFkeLimit = <number of lines>
#
# Example:
UDPLogLimit         = 1000000
UDPLogAfterFkeLimit = 5000


## UDPConsole
#
# Print a copy of all UDP/UDPCP/AaTrace logging to console
# (same as option -c).
#
# Syntax:
# UDPConsole = 0|1
#
# Example:
# UDPConsole = 1
UDPConsole = 0


## UDPLogPorts
#
# Re-defines the UDP ports for capturing log messages.
#
# Syntax:
# UDPLogPorts = <port>,<port>,...
#
# Example (this is the default):
# UDPLogPorts = 51000,51011
# UDPLogPorts = 0
UDPLogPorts = 51000,51001,50011,51003

## UDPCPLogging
#
# Enable/disable UDPCP logging of messages between test PC and Flexi
# (same as option -P). Logging will only take place if UDP logging has
# been enabled on the command line (-U).
#
# Syntax:
# UDPCPLogging = 0|1
#
# Example (this is the default):
# UDPCPLogging = 0
UDPCPLogging = 1


## MessageMap
#
# Specify a file that can be used for mapping message IDs to message
# names, so you see the message names in the UDP log (same as option -s).
# Supported file types are XML (Pegasus, MacSctSackTarget.xml) and
# AHTI (MessageIDs.txt).
#
# Syntax:
# MessageMap = <file path>
#
# Example (this is the default):
# MessageMap = C:/Pegasus/workspace_Inc16/MacSctPegasus/ProtocolDescription/MacSctSackTarget.xml
MessageMap = C:/Python25/Lib/site-packages/BtsShell/resources/tools/7UP/MessageIds.txt


## UDPCPLogRawMessages
#
# Specify UDPDP message ids for raw logging (ie, these messages
# will appear with full hexdump in UDP log). Same as
# option -R. Message ids are specified in hex. Use '*'
# for a full dump of *all* messages (this may affect logging
# performance).
#
# Logging will only take place if UDP logging has been enabled on the
# command line (-U).
#
# Syntax:
# UDPCPLogRawMessages = *|(<id>,...)
#
# Examples:
# UDPCPLogRawMessages = 2ba2,2ba3
UDPCPLogRawMessages = *


## UDPCPLogRawEther
#
# When raw message logging has been enabled, this option specifies
# that not only the UDPCP message shall be captured, but the entire
# Ethernet frame.
#
# Only useful if you suspect some UDPCP communication problem
# from/to your test program.
#
# *THIS WILL BREAK DECODING* with -D or the fled tool, since
# both assume UDPCP message only. So only enable this feature when
# you really know what you're doing.
#
# Syntax:
# UDPCPLogRawEther = 0|1
#
# Example (this is the default):
# UDPCPLogRawEther = 0


## PacketCaptureBufferSize
#
# For monitoring UDP(CP) traffic on Ethernet level, 7up uses the same
# packet capturing library that's used by Wireshark ("WinPcap").
#
# When you expect a *very* high throughput of logging messages (or
# AaTraced messages), then 7up/your PC/your hard disk may not be able
# to write the UDP log quickly enough for catching up with incoming data.
#
# 7up will issue a warning in such cases ("x packets dropped by
# WinPcap").
#
# As long as you expect such high throughputs in bursts only, you can
# try to avoid losses by increasing WinPcap's internal packet buffer
# size. The default size is 1024 KB.
#
# Syntax:
# PacketCaptureBufferSize = <kilobytes>
#
# Example (this is the default):
# PacketCaptureBufferSize = 1024


## InternalTracing
#
# Activate tracing of (DSP-/FSP-)internal messages via AaTrace (same
# as BtsLog functionality).  You can define whether to trace
# all messages, or rx/tx-only, but _the setting must be identical
# for all messages traces on one core_. The default is to trace
# all messages (ie, rx and tx).
#
# Logging will only take place if UDP logging has been enabled on the
# command line (-U).
#
# Syntax:
# InternalTracing = <dsp>:[(tx|rx|all|none):]<msgStart>[-<msgEnd>],...
#
# Example:
# InternalTracing = 1443:tx:238f-24ff,1443:tx:2210-2240,1482:rx:235e,1483:235e


## AutomationMethods
#
# Specify automation methods (same as option -A)
# Currently supported methods are:
#
#   o "tmstart[=<timeout>]"
#     when using "-O", automatically start cores when detecting that
#     a AaTraceMenCtrlResponseMsg is sent from Flexi; requires
#     options -P and -U (UDPCP tracing)
# 
#   o "fatalmemdump"
#     save fday memory areas and registers to file in case of crash
#     (use together with option -F)
# 
#   o "finalmemdump=<id>:<id>:..."
#      take memory dumps (and, when using a debugger, registers) on
#      specified cores before exiting example: finalmemdump=1442:1461
# 
#   o "autoflush"
#      set autoflush mode for STDOUT/STDERR. for automation only.
# 
#   o "remote"
#      remote access via TCP socket on port 64738; for automation only
#
#   o "remotetrigger[=<port>]"
#      replace "ENTER to continue" by waiting for incoming TCP
#      connection on <port> (or 64738, if not given); for automation
#      only; do not mix with "remote" option
#
#   o "getfcmstartlogs"/"getfcmendlogs"
#      retrieve "/ram/startup.log" "/ram/startup.zip" and "/aastartup_log.txt"
#      from FCM MCU before/after all other steps; if both options are specified,
#      the "end" logs will overwrite "start" logs
#
#   o "getfcmstartprocs" / "getfcmendprocs"
#      retrieve process list from FCM unit before/after all other steps; the
#      process lists will be saved in text files "fcm-mcu-processes-start.txt" and
#      "fcm-mcu-processes-start.txt", respectively
#
#   o "socketinfo"
#      upon startup, print information on active Windows sockets
#
#   o "ftpd[=<directory>]"
#      start FTP server for Flexi binfiles; by default, same directory as
#      specified for option "-O" is used
#
#   o "ftpwait[=<timeout>]"
#      wait for Flexi requesting binfiles after reset; if no timeout is
#      specified, used the default of $macConfig->{ftpwaitTimeout} (seconds)
#
#   o "ensurebootsw=<path>|auto"
#      FSMr2 only: ensure that the Flexi has installed the given DSP
#      boot software file, and update if necessary; background:
#      - 7up tracks the currently installed version in the file
#        /rom/dspbootsw-hash.txt to avoid unnecessary re-installations
#      - when using the special argument 'auto' instead of a file name, 7up will
#        auto-detect the PS version of your flexi and then try to find the correct
#        boot software file via the "BootSwMapping" entries that you can specify
#        below
#      - with 'auto', the currently installed PS version is determined by checking
#        fdayrtsw2.bin, which is either taken from "ftpd" directory (if specified),
#        or directly from Flexi /ram
#      Note that if you did not already select a full (soft/hard) reset and "wait
#      for ping", then (if the boot sw has to be upgraded) this option *will*
#      enable soft reset and "wait for ping", which may lead to unexpected results
#      when using binfiles-over-ftp and not specifying the ftpd automation option.
#
#   o "earlyudplogging"
#      normally, UDP logging starts after the Flexi is "up", that is, after all reset,
#      ftp, boot software, ping operarations (if any of them has been selected).
#      with this option, UDP logging will start right after FTP transfers completed;
#      this is useful to capture problems in the startup process.
#
#   o "skipinternalpings"
#      when you have enabled UDPCP logging, then 7up will log *all* SysCom messages
#      sent from/to the Flexi, *including* the messages that 7up sends itself to
#      implement the "SysCom-based ping" (currently, message id 0x2b83); if you want
#      to exclude those messages from the logs, then enable this option.
#
# Syntax:
# AutomationMethods = <method>,...
#
# Examples:
# AutomationMethods = tmstart,fatalmemdump,finalmemdump=1442:1463
# AutomationMethods = tmstart=600
 AutomationMethods = fatalmemdump,remotetrigger=12345

## BootSwMapping
#
# Here you can specify which DSP boot software is used
# for which platform software reversion. This mapping is used by
# the "ensurebootsw=auto" automation option.
#
# The mapping is based on strings like
#
#   PS_DSPHWAPI_BUILD: ps2009_05#2009.05-52
#
# which can be found in .out files (7up will extract the information
# from your binfiles).
#
# You can specify as many 'BootSwMapping' options as you like. Each
# specifies a perl regular expression against which the PS revision
# (like "ps2009_05#2009.05-52") is matched. If there's a match, then the
# dsp boot sw file that you specify for that pattern will be used.
#
# The first matching entry will be used, so the order can matter.
#
# Syntax:
# BootSwMapping = <pattern>,<dsp boot sw file>
#
# Example:
# BootSwMapping = "^ps2009_",H:/flash/dspbootsw-ps2009.bin
# BootSwMapping = "^ps2010_",H:/flash/dspbootsw-ps2010.bin


## FatalErrorHandling
#
# Specify cores for which fatal kernel error handling is desired.
# This will detect cores that enter the fatal kernel error
# handler; for those, ETB buffer will be read from memory
# and will then be converted to TDF format. Same as option -F.
#
# Use '*' to specify all cores for which are loaded with software.
#
# Syntax:
# FatalErrorHandling = *|<core>,...
#
# Examples:
# FatalErrorHandling = *
# FatalErrorHandling = 1443,1483
FatalErrorHandling = *

## FatalErrorFilter
#
# Here you can specify regular expressions to limit the amount of
# dumped data in fatal kernel error case. Every fatal kernel error
# line that matches the pattern will be *ignored* for all dump
# activities (ie, no ETB, no memory dumps when the "fatalmemdump"
# automation option is enabled).
#
# Typically you use this to avoid dumping of Faraday cores which crash
# as a "side-effect" of another crashing core. This saves time.
#
# The patterns are perl regular expressions, so you must escape
# certain special caracters (like parentheses) by preceding them with a
# backslash. See
#   http://perldoc.perl.org/perlre.html
# for details.
#
# Multiple instances of this option can be specified (they will be
# combined by logical "or") to avoid monster patterns here.
#
# By default, nothing is ignored.
#
# Syntax:
# FatalErrorFilter = <pattern1>
# FatalErrorFilter = <pattern2>
# [...]
#
# Examples:
# a) "sibling" core crash:
#  FatalErrorFilter = "\(IdleProcess\) extra=0x\w+ ecode=0x00000024"
# b) dead SRIO connection:
#  FatalErrorFilter = "ecode=0x0000DEAD"


## FlexiNetDevicePattern
#
# Specify pattern (regular expression) that is used for finding
# the correct network device where your Flexi is connected.
#
# If this pattern is defined, only device names that match the pattern
# will be considered.
# Matching takes place against the "Description" field that you
# see in the output of "ipconfig /all"
#
# If your pattern contains leading/trailing space, you can enclose
# it in doubel quotes (").
#
# Syntax:
# FlexiNetDevicePattern = <regexp>|"<regexp>"
#
# Examples:
# FlexiNetDevicePattern = Intel
# FlexiNetDevicePattern = "Intel"
# FlexiNetDevicePattern = " space before and after "


## FlexiReadyAddresses (formerly called "FlexiReadyIps")
#
# This defines a list of IPs and/or node ids that are "pinged" in
# order to check that the Flexi has recovered from a reset/power
# switch cycle. The "ping" is done via ICMP ECHO_REQUEST packets for
# IP addresses; for node ids, a SysCom messages is sent to the ECHO
# cpid of the AaSysComControl process.
#
# All addresses are pinged in the given order; so, in order to save
# some bandwidth, you should first specify the IP that comes up LAST
# when Flexi starts.
#
# If you specify any node ids here, then the IP address of the FCM MCU
# should appear in the list before the first node id, since the FCM
# MCU is required as SysCom "gateway" into the FSM - you will see
# less errors then.
#
# You can use the special keywords 'ALL' and 'ALLSYSCOM', which will
# be replaced as follows:
# a) 'ALLSYSCOM':
# - IP of FCM MCU, followed by the node ids of the FCT MCU
#   and the nids of all DSP cores of the FSP board
# b) 'ALL':
# - on FSMr2: legacy behaviour: IPs of all MCUs and DSP middle cores
# - on FSMr3: same as 'ALLSYSCOM'
#
# The legacy name of this option, "FlexiReadyIps", will still work,
# but should not be used longer to avoid any confusion.
#
# Syntax:
# FlexiReadyAddresses = ALL|ALLSYSCOM|<ip address|node id>,...
#
# Examples:
#
# 1. this is the default, suitable for LTE MAC on FSMr2 without SRIO dummies:
#
# FlexiReadyIps = 192.168.255.176,192.168.255.174,192.168.255.172,192.168.255.35,192.168.255.1
#
# 2. this checks all IPs in a FSMr2 FCM/FSP3 configuration - suitable
#    for LTE MAC SCT when using SRIO and/or "quick reset" (-z/-Z)
#
# FlexiReadyAddresses = 192.168.255.177,\
#                       192.168.255.176,\
#                       192.168.255.175,\
#                       192.168.255.174,\
#                       192.168.255.173,\
#                       192.168.255.172,\
#                       192.168.255.171,\
#                       192.168.255.35,\
#                       192.168.255.1
# On FSMr2, this is the same as just
# FlexiReadyAddresses = ALL
#
# 3. this checks the FCM MCU via IP, then all MCU & DSP nodes (for a
#    FSMr2 with one FSPC#3):
#
# FlexiReadyAddresses = 192.168.255.1,\
#                       0x1011,0x1413,\          # FCM & FCP MCU
#                       0x1431,0x1432,0x1433,\   # DSP 1 cores
#                       0x1441,0x1442,0x1443,\   # DSP 2 cores
#                       0x1451,0x1452,0x1453,\   # DSP 3 cores
#                       0x1461,0x1462,0x1463,\   # DSP 4 cores
#                       0x1471,0x1472,0x1473,\   # DSP 5 cores
#                       0x1481,0x1482,0x1483,\   # DSP 6 cores
#                       0x1491,0x1492,0x1493,\   # DSP 7 cores
# On FSMr2, this is the same as just
# FlexiReadyAddresses = ALLSYSCOM
#
# 4. this checks the pool1 DSP cores used in LTE MAC on FSMr3:
#
# FlexiReadyAddresses = 192.168.255.1,\
#                       1011,1231,1232,1233,1234,\
#                       1261,1262,1263,1264


## FlexiReadyTimeout
#
# Here you can specify the timeout (in seconds) for waiting for "Flexi
# ready", which is used if you specify the "-w" (wait) command line
# switch. Any timeout argument that's given to -w takes precendence
# over the value specified here.
#
# For boot DSP software installation, a (fixed) extra time of 75s will
# be added autmatically.
#
# Example (this is the default):
# FlexiReadyTimeout = 300


## FlexiFsmNumber / FlexiFspNumber
#
# 7up can control any Flexi BTS FSM module and FSP board (but
# only one at a time).
#
# Here you define which FSM and FSP number you want to interact
# with. The default is FSM 1 and FSP 3.
#
# Optionally, you can also specify the FSM type with the
# 'FlexiFsmNumber' keyword. Supported are 'r2' for Faraday-based FSMr2
# modules, and 'r3' for Nyquist-based FSMr3 hardware. The default is
# 'r2'.
#
# Syntax:
# FlexiFsmNumber  = [<type>:]<number, typically 1..3>
# FlexiFspNumber  = <number, typically 1..3>
#
# Examples:
# 1. this is the default:
#      FlexiFsmNumber = 1
#      FlexiFspNumber = 3
# 2. when using FSMr3 (numbering is unconfirmed yet)
FlexiFsmNumber = r3:1
FlexiFspNumber = 1


## FlexiMcuCredentials
#
# Here you can specify user and password that 7up will use to access
# the FCM/FCT MCU via Telnet and FTP. If Telnet does not require any
# password, then specify the special password 'NONE'.
#
# If this option is undefined, then the default is user 'root' and no
# password.
#
# Syntax:
# FlexiMcuCredentials = <user>:(<password>|NONE)
#
# Example (this is the default):
#     FlexiMcuCredentials = root:NONE
#


## TestPcAddress
#
# Normally, 7up automatically determines the IP address of your test PC
# that's assigned to the Flexi subnet (192.168.255.x). If your test PC
# has multiple addresses on that net, then you may want to select
# a specific address. This you can do here:
#
# Syntax:
# TestPcAddress = <ip address>
#
# Example:
# TestPcAddress = 192.168.255.157


## TassuInterface
#
# Here you can configure how 7up contacts the AaTestPort subsystem on
# the FCM MCU for establishing its own AaSysCom routes (needed so that
# 7up can send and receive messages). If the method is TCP-based, then
# you can optionally select to have all subsequent SysCom messages
# tunnelled via TCP as well.
#
# You can select between TCP- and UDP-based connection, and for each,
# you can select the port. It is recommended (and default) to use TCP
# connection to port 15003 (also 15004 seems to work, in cases some
# other application requires permanent access to port 15003).
# Alternatively, UDP-based connection is possible via port 16008; if
# you use that, you may need to tweak your TestPcAddress also (use
# Wireshark to find out what's going on).
#
# If you provide the 'tcptunnel' keyword, then 7up will not register
# itself in the SysCom system; it will not send any UDPCP directly,
# but it will tunnel all messages via TCP to the AaTestPort proxy on
# the MCU.
#
# If you just specify the protocol, then port 15003 is default for TCP,
# and 16008 is the default for UDP.
#
# Syntax:
# TassuInterface = <tcp|udp|tcptunnel>:[<port>]
#
# Examples:
# TassuInterface = tcp:15003 (this is the default)
# TassuInterface = tcp       (same as above)
# TassuInterface = udp:16008 (use UDP, not TCP)
# TassuInterface = udp       (same as above)
# TassuInterface = tcptunnel:15003 (tunnel all SysCom traffic via TCP)
# TassuInterface = tcptunnel       (same as above)
TassuInterface = tcp:15004

# ForceLocalCpid
#
# For sending and receiving SysCom messages, 7up needs to register
# with its own SysCom node id and Cpid (ie, its SicAd). 7up selects
# its SicAd depending on your FSM type (FSMr2/3) and on your Tassu
# connection method:
#
# If you select the 'tcptunnel' TassuInterface, then the SicAd does
# not matter, since the FCM MCU acts as proxy that performs "NAT" on
# SysCom level. However, with the 'tcptunnel' method, only one client can
# connect to the FCM at the time.
#
# For all other methods, 7up directly sends/receives SysCom (UDPCP)
# messages, and behaviour depends on your FSM revision:
# - FSMr2: node id = 0xfe12, cpid = PC udp port number
#          --> no clashes possible on PC and on MCU side. max flexibility,
#              any number of simultaneous connections.
# - FSMr3: node id = 0x1011, cpid = PC udp port number
#          (local nid is required because of Srio-based SysCom routing
#          in FSMr3)
#          --> clashes possible on FCM MCU side, if cpid is already used
#              by MCU, but multiple connections are possible
#
# With this option, you will a) enforce usage of a local nid (as in
# FSMr3 case) and b) explicitly set the cpid that's used by 7up when
# 7up uses the FCM MCU node id (that is, in the FSMr3 mode). In this
# way you can avoid clashes, but only one instance of 7up can be used
# for each selected cpid value. Note that local nids will not work on
# FSMr2 for now.
#
# The cpid can be specified in decimal or hex format (the latter
# preceded by "0x").
#
# Example:
# ForceLocalCpid = 0xfce2


## TtiTraceAliases (was: TftpAliases)
#
# This defines a set of "shortcuts" that can be used for TTI trace
# transfers. These shortcuts will also be used for naming the output
# files. (This option was called "TftpAliases" before SicFtp support has
# been added; you can use both names.)
#
# You can mix IP addresses (for TFTP transfer) and node ids (for SicFtp)
# arbitrarily.
#
# Syntax:
# TtiTraceAliases = <alias name>:(<ip address>|<node id>|(<alias name>+<alias name>+...))
#
# Example:
# TtiTraceAliases = ul:192.168.255.174,         \
#                   dl:192.168.255.172,         \
#                   all:ul+dl,                  \
#                   ulsicftp:0x1462,            \
#                   dlsicftp:0x1442,            \
#                   allsicftp:ulsicftp+dlsicftp
#


## HistoryBufferSignatures
#
# Here you define the signatures that are used for auto-detecting
# history buffers in binfiles. These are characteristic sequences of
# bytes, specific to every history buffer "type".
# For reach history buffer that you want to use, specify its
# signature as a sequence of little endian "u32" words, in hexadecimal
# notation.
#
# All words in a signature must be separated by a colon (":"), and
# multiple signatures must be separated by comma (",").
#
# Syntax:
# HistoryBufferSignatures = ([0x]<u32-word>:...),...
#
# Example: (this is the default - when you define this option,
#          then you must add this default also)
#
# HistoryBufferSignatures = \
#       # LTE MAC:
#       0x12b4ad81:0x94cc425b:0x8c5385d2:0x9e5f340b


## MemdumpAreaMapping
#
# Here you can specify which "set" of memory dump area specifications
# will be used for a specific platform software revision. The mapping
# is based on strings like
#
#   PS_DSPHWAPI_BUILD: ps2009_05#2009.05-52
#
# which can be found in .out files (7up will extract the information
# from your binfiles).
#
# You can specify as many 'MemdumpAreaMapping' options as you like. Each
# specifies a perl regular expression against which the PS revision
# (like "ps2009_05#2009.05-52") is matched. If there's a match, then the
# MemdumpArea "set" that you specify for that pattern will be used.
#
# The first matching entry will be used, so the order may matter. If
# no pattern matches, then the default "set" will used.
#
# Syntax:
# MemdumpAreaMapping = <pattern>,<set name>
#
# Example:
# MemdumpAreaMapping = "^ps2009_","2009"
# MemdumpAreaMapping = "^ps2010_","2010"


## MemdumpArea
#
# Here you specify size and location of memory areas that will be dumped
# when memory dumping is enabled.
#
# Memory areas are assumed to be identical across all FSMs and FSPs, but 
# you can specify different areas for each faraday core within one FSP.
# For entries that are identical for several cores or fdays, you can use
# asterisks ("*") as wildcard characters.
#
# Multiple areas can be specified. As soon as you use this option, all
# the existing defaults will be deleted.
#
# Each entry specifies the faraday/core for which it applies, the
# <start> address in memory, the <size> (in bytes) and a <name> that's
# used in file names of memory dumps. <start> and <size> can be given
# in hexadecimal notation with the prefix "0x".
#
# You can optionally specify different 'sets' of areas, and the actual
# set that's used for dumping is determined from the patterns that you
# specify with the "MemdumpAreaMapping" keyword above. Again, you can
# use wildcards to specify ranges that are identical in all sets.
#
# Syntax:
# MemdumpArea = f[1234567*]c[123*],<start>,<size>,<name>
#
# Example (this is the default, suitable up to PS_REL_2009):
#
# # gPdb is identical on all cores:
# MemdumpArea = f*c*,0x80000000,0x00100000,gPdb
# # intmem:
# MemdumpArea = f*c1,0x10800000,0x00100000,intmem
# MemdumpArea = f*c2,0x11800000,0x00100000,intmem
# MemdumpArea = f*c3,0x12800000,0x00100000,intmem
# # extmem1:
# MemdumpArea = f*c1,0x82000000,0x01000000,extmem1
# MemdumpArea = f*c2,0x84000000,0x01000000,extmem1
# MemdumpArea = f*c3,0x86000000,0x01000000,extmem1
# # extmem2:
# MemdumpArea = f*c1,0x83000000,0x01000000,extmem2
# MemdumpArea = f*c2,0x85000000,0x01000000,extmem2
# MemdumpArea = f*c3,0x87000000,0x01000000,extmem2
#
# Example (suitable for automated selection between PS_REL_2009 and 2010):
#
# # gPdb is identical on all cores, but different between PS_REL_2009 and 2010:
# MemdumpArea.2009 = f*c*,0x80080000,0x00100000,gPdb
# MemdumpArea.2010 = f*c*,0x80080000,0x00100000,gPdb
# # intmem (same for 2009 and 2010):
# MemdumpArea.* = f*c1,0x10800000,0x00100000,intmem
# MemdumpArea.* = f*c2,0x11800000,0x00100000,intmem
# MemdumpArea.* = f*c3,0x12800000,0x00100000,intmem
# # extmem1 (same for 2009 and 2010):
# MemdumpArea.* = f*c1,0x82000000,0x01000000,extmem1
# MemdumpArea.* = f*c2,0x84000000,0x01000000,extmem1
# MemdumpArea.* = f*c3,0x86000000,0x01000000,extmem1
# # extmem2 (same for 2009 and 2010):
# MemdumpArea.* = f*c1,0x83000000,0x01000000,extmem2
# MemdumpArea.* = f*c2,0x85000000,0x01000000,extmem2
# MemdumpArea.* = f*c3,0x87000000,0x01000000,extmem2


## EtbBaseArea
#
# Here you specify location and size of the ETB on the first
# (leftmost) faraday core; the ETB addresses for other cores will be
# determined automatically (by adding the given size to the start
# address of the leftmost core).
#
# ETB addresses are identical for all faradays on all FSPs in all
# FSMs.
#
# Start address and size can be given in hexadecimal notation by
# preceding them by "0x".
#
# Syntax:
# EtbBaseArea = <start>,<size>
#
# Example (this is the default, suitable at least until PS_REL_2009):
# EtbBaseArea = 0x8004a000,4096


## CoreInterStartupDelay
#
# Here you can specify a delay (in seconds) that is used
# between starting the DSP cores via CCStudio. By default,
# cores are started one after another as quickly as possible
# (in the sequence specified by the priorities in "OutFileNames").
# No delay will be used for cores with identical priority.
#
# You can also provide fractional values like "0.5" here.
#
# Syntax:
# CoreInterStartupDelay = <seconds>
#
# Example: (this is the default, hard-coded in 7up)
# CoreInterStartupDelay = 0


## MessageDecodingLimit
#
# This value can be specified to limit the amount of decoded
# messages when using message decoding (option -D). If given,
# decoding aborts after the given number of decoded messages.
# Otherwise, the complete UDP log will be decoded.
#
# Syntax:
# MessageDecodingLimit = <count>
#
# Example:
# MessageDecodingLimit = 1000


## OutFileNames
#
# Define name of the .out files used for target loading
# with option -O, including the start "priority"
# for each core. Cores with a lower start priority will
# be started earlier. Both name and start priority
# are optional.
#
# Use empty entries to specify unused cores. Those will
# neither be loaded nor started, *but* they will be opened
# in CCStudio (which means GELs will be loaded, and core
# may be halted).
#
# Use the special name "UNUSED" to identify cores that
# should not be touched by CCStudio at all.
#
# Syntax:
# OutFileNames = [<prio>:][(<name>|"<name>")],...
#
# Example 1: (this is the default, hard-coded in 7up)
#
# OutFileNames = 4:macFspbFaraday2Cpu1Debug.out,               \
#                1:macFspbFaraday2Cpu2_withTUPsimDebug.out,    \
#                5:macFspbFaraday2Cpu3Debug.out,               \
#                6:macFspbFaraday4Cpu1Debug.out,               \
#                2:macFspbFaraday4Cpu2_withTUPsimDebug.out,    \
#                ,                                             \
#                ,                                             \
#                3:macFspbFaraday6Cpu2Debug.out,               \
#                7:PhySimulatorDebug.out
#
# Example 2: (same without debug mode)
#
# OutFileNames = 4:macFspbFaraday2Cpu1.out,               \
#                1:macFspbFaraday2Cpu2_withTUPsim.out,    \
#                5:macFspbFaraday2Cpu3.out,               \
#                6:macFspbFaraday4Cpu1.out,               \
#                2:macFspbFaraday4Cpu2_withTUPsim.out,    \
#                ,                                        \
#                ,                                        \
#                3:macFspbFaraday6Cpu2.out,               \
#                7:PhySimulator.out
#
# Example 3: (setup for increment 17 with 9 cores/out files)
#
# OutFileNames = 4:macFspbFaraday2Cpu1Debug.out,          \
#                1:macFspbFaraday2Cpu2Debug.out,          \
#                5:macFspbFaraday2Cpu3Debug.out,          \
#                6:macFspbFaraday4Cpu1Debug.out,          \
#                2:macFspbFaraday4Cpu2Debug.out,          \
#                8:tupFspbFaraday4Cpu3Debug.out,          \
#                9:tupFspbFaraday6Cpu1Debug.out,          \
#                3:macFspbFaraday6Cpu2Debug.out,          \
#                7:PhySimulatorDebug.out  
