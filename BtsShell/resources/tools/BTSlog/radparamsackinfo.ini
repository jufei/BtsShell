;This ini file enables describing different kind of "sets" of domains
;for Btslog radparameters. Those sets are called products.
;This configuration affects only to visibility of parameter names and their descriptions. 
;This configuration has not any relation to commucation between BTSLog and BTS.

;Domains define which R&D parameter sack is used for the selected domain.

;The concept "System Component" is changed to "domain" at spring 2007.
;For starters, here's how ever the old indexes for system components.

;typedef enum EBtsSwSystemComponent
;{
;    EBtsSwSystemComponent_HwApi       = 0,
;    EBtsSwSystemComponent_Telecom     = 1,
;    EBtsSwSystemComponent_TUP         = 2,
;    EBtsSwSystemComponent_DSPCodec    = 3,
;    EBtsSwSystemComponent_DSPRake     = 4,
;    EBtsSwSystemComponent_DSPMac_hs   = 5
;} EBtsSwSystemComponent;


; Shortest possible example of a new product definition:

; [PRODUCT_1]
; Domain_1	= sw_conf_table.h |enum FEAT_DBG|0|1|

;--------------------------------------------------------------------
; 		Description of the the fields
; Section name [PRODUCT_1] is a customizable product name.
; Key -> Domain_1 is name of the domain, formerly known as a system component

; 1st value field -> sw_conf_table.h is the name of the sack file where parameter
; names are located

; sack file without a path is in relation with btslog.exe. 
; Absolute or relative paths are allowed as well.

;  suitable path examples:
;  WN_2_ENV\\sw_conf_table.h 
;  D:\\WN_2_ENV\\sw_conf_table.h
;  \\SomeServer\\groups\\sw_conf_table.h

; 2nd value field is the enum title, searched by Btslog's sack parser
; 3rd value field is the btsDomainId, formerly known as EBtsSwSystemComponent.
; 4th value field is the sack decoding format. R&D param sack formats 
; are described in BTS R&D Tools Interface Specification v.11.1.doc
; Here's a brief reminder of the formats:

; Format 1 is dedicated only to sw_conf_table.h

; Format 2 seems to be currently most popular. 
  Enum field's description follows the field directly.
  
; Format 3 is propably more popular in the future. 
  Enum field descriptions are located at the end of the header file.
;--------------------------------------------------------------------
;--------------------------------------------------------------------

[PRODUCT_WN]
HwApi           = rdparam_sacks\\sw_conf_table.h |enum FEAT_DBG|0|1|
Telecom         = rdparam_sacks\\ERadParamIndexTelecom.h |enum ERadParamIndexTelecom|1|2|
TUP             = rdparam_sacks\\ERadParamIndexTup.h |enum ERadParamIndexTup|2|2|
DSPCodec        = no_sack_available |enum no_enum_available|3|2|
DSPRake         = no_sack_available |enum no_enum_available|4|2|
DSPMac_hs       = rdparam_sacks\\ERadParamIndexMacHs.h|enum ERadParamIndexMacHs|5|2|
DSPHsupaL2      = rdparam_sacks\\ERadParamIndexHsupaL2.h|enum ERadParamIndexHsupaL2|6|2|

[WN50_CCS]
Legacy          = rdparam_sacks\\sw_conf_table.h |enum FEAT_DBG|0|1|
Ccs             = rdparam_sacks\\AaConfigRadDefinitions.h |enum ERadCcs|1|2|
Hwapi           = rdparam_sacks\\ERadHwapi.h |enum ERadHwapi|2|2|
Dft             = no_sack_available |enum no_enum_available|3|2|
Telecom		= no_sack_available |enum no_enum_available|4|2|
TUP		= no_sack_available |enum no_enum_available|5|2|
DSPCodec	= no_sack_available |enum no_enum_available|6|2|
DSPRake		= no_sack_available |enum no_enum_available|7|2|
DSPMac_hs	= no_sack_available |enum no_enum_available|8|2|
DSPHsupaL2	= no_sack_available |enum no_enum_available|9|2|
LteMac		= rdparam_sacks\\LteMacRadDefinitions.h |enum ERadLteMac|10|2|


[LTX_rel1]
LTX_SW		= rdparam_sacks_for rf_module\\sw_conf_table.h |enum FEAT_DBG|0|1|

[LTX_rel2]
LTX_SW		= rdparam_sacks_for rf_module\\sw_conf_table.h |enum FEAT_DBG|0|1|
CCS		= rdparam_sacks\\AaConfigRadDefinitions.h |enum ERadCcs|1|2|
DSPMac_hs 	= rdparam_sacks\\ERadParamIndexMacHs.h|enum ERadParamIndexMacHs|5|2|
DSPHsupaL2  	= rdparam_sacks\\ERadParamIndexHsupaL2.h|enum ERadParamIndexHsupaL2|6|2|









